import com.matthewprenger.cursegradle.CurseArtifact
import com.matthewprenger.cursegradle.CurseProject
import com.matthewprenger.cursegradle.CurseRelation
import org.ajoberstar.grgit.Grgit
import org.jetbrains.gradle.ext.Gradle
import org.gradle.internal.jvm.Jvm
import org.gradle.kotlin.dsl.internal.sharedruntime.codegen.generateKotlinDslApiExtensionsSourceTo
import se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask
import java.text.SimpleDateFormat
import java.util.*

plugins {
    id("java")
    id("java-library")
    id("net.minecraftforge.gradle") version "6.+"
    id("maven-publish")
    id("org.jetbrains.gradle.plugin.idea-ext") version "1.1.7"
    id("eclipse")
    //id("com.gtnewhorizons.retrofuturagradle") version "1.3.27"
    id("com.matthewprenger.cursegradle") version "1.4.0"
    id("org.ajoberstar.grgit") version "4.1.1"
    id("se.bjurr.gitchangelog.git-changelog-gradle-plugin") version "1.72.0"
    id("wtf.gofancy.fancygradle") version "1.+"
    /*
    idea
    id("com.google.devtools.ksp") version "1.8.10-1.0.9" apply false
    id("com.gtnewhorizons.retrofuturagradle") version "1.3.27"
    //

    id("org.jetbrains.gradle.plugin.idea-ext") version "1.1.7"
    id("com.matthewprenger.cursegradle") version "1.4.0"
    id("se.bjurr.gitchangelog.git-changelog-gradle-plugin") version "1.72.0"
    // Common:
    //ksp ("org.ow2.asm:asm-debug-all:5.2")

    `maven-publish`*/
}

repositories {

}


val mcVersion: String by project
val forgeVersion: String by project
val modVersion: String by project
val archiveBase: String by project

val libVulpesVersion: String by project
val jeiVersion: String by project
val icVersion: String by project
val gcVersion: String by project

val startGitRev: String by project


setProperty("archivesBaseName", archiveBase)

val buildNumber: String by lazy { System.getenv("BUILD_NUMBER") ?: getDate() }

fun getDate(): String {
    return "1"
    val format = SimpleDateFormat("HH-mm-dd-MM-yyyy")
    format.timeZone = TimeZone.getTimeZone("UTC")
    return format.format(Date())
}

version = "$modVersion-$buildNumber"

println("$archiveBase v$mcVersion-$version")

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
    }
}

configurations.configureEach {
    exclude(group = "net.minecraftforge", module = "mergetool")
}

//sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
tasks.compileJava {
    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"
}


minecraft {
    mappings("snapshot", "20171003-1.12")

    accessTransformer(file("src/main/resources/META-INF/accessTransformer.cfg"))

    runs {
        create("client") {
            properties(
                mapOf(
                    "forge.logging.markers" to "SCAN,REGISTRIES,REGISTRYDUMP,COREMODLOG",
                    "forge.logging.console.level" to "info"
                )
            )

            workingDirectory = file("run").canonicalPath

            mods {
                create("advancedrocketry") {
                    source(sourceSets["main"])
                }
            }
        }
        create("server") {
            properties(
                mapOf(
                    "forge.logging.markers" to "SCAN,REGISTRIES,REGISTRYDUMP,COREMODLOG",
                    "forge.logging.console.level" to "info"//, "fml.coreMods.load" to "com.gramdatis.core.setup.GramdatisPlugin"
                )
            )
            arg("nogui")

            workingDirectory = file("run-server").canonicalPath

            mods {
                create("advancedrocketry") {
                    source(sourceSets["main"])
                }
            }
        }
    }
}

fancyGradle {
    patches {
        resources
        coremods
        codeChickenLib
        asm
    }
}

dependencies {

}

tasks.processResources {
    //includeEmptyDirs = false
    inputs.properties(
        "advRocketryVersion" to project.version,
        "mcVersion" to mcVersion,
        "libVulpesVersion" to libVulpesVersion
    )

    filesMatching("mcmod.info") {
        expand(
            "advRocketryVersion" to project.version,
            "mcVersion" to mcVersion,
            "libVulpesVersion" to libVulpesVersion
        )
    }

    exclude("**/*.sh")
}

val currentJvm: String = Jvm.current().toString()
println("Current Java version: $currentJvm")

val gitHash: String by lazy {
    val hash: String = if (File(projectDir, ".git").exists()) {
        val repo = Grgit.open(mapOf("currentDir" to project.rootDir))
        repo.log().first().abbreviatedId
    } else {
        "unknown"
    }
    println("GitHash: $hash")
    return@lazy hash
}

// Name pattern: [archiveBaseName]-[archiveAppendix]-[archiveVersion]-[archiveClassifier].[archiveExtension]
tasks.withType(Jar::class) {
    archiveAppendix.set(mcVersion)
    manifest {
        attributes(
                "Built-By" to System.getProperty("user.name"),
                "Created-By" to currentJvm,
                "Implementation-Title" to archiveBase,
                "Implementation-Version" to project.version,
                "Git-Hash" to gitHash,
                "FMLCorePlugin" to "zmaster587.advancedRocketry.asm.AdvancedRocketryPlugin",
                "FMLCorePluginContainsFMLMod" to "true"
        )
    }
}

val deobfJar by tasks.registering(Jar::class) {
    from(sourceSets["main"].output)
    archiveClassifier.set("deobf")
}

tasks.build {
    dependsOn(deobfJar)
}

val makeChangelog by tasks.creating(GitChangelogTask::class.java) {
    file = file("changelog.html")
    untaggedName = "Current release ${mcVersion}-${project.version}"

    //Get the last commit from the cache or config if no cache exists
    val lastHashFile = file("lasthash.txt")

    fromCommit = if (!lastHashFile.exists())
        startGitRev
    else
        lastHashFile.readText()

    lastHashFile.writeText(gitHash)

    toRef = "HEAD"
    gitHubIssuePattern = "nonada123";
    templateContent = """
        {{#tags}}
          <h3>{{name}}</h3>
          <ul>
            {{#commits}}
            <li> <a href="https://github.com/zmaster587/AdvancedRocketry/commit/{{hash}}" target=_blank> {{{message}}}</a>
        </li>
            {{/commits}}
          </ul>
        {{/tags}}
    """.trimIndent()
}

curseforge {
    apiKey = (project.findProperty("thecursedkey") as String?).orEmpty()

    project(closureOf<CurseProject> {
        id = "236542"
        relations(closureOf<CurseRelation> {
            requiredDependency("libvulpes")
        })
        changelog = file("changelog.html")
        changelogType = "html"
        // Why is it hardcoded to beta tho?..
        releaseType = "release"
        addGameVersion(mcVersion)
        mainArtifact(tasks.jar.get(), closureOf<CurseArtifact> {
            displayName = "AdvancedRocketry ${ project.version } build $buildNumber for $mcVersion"
            })
        addArtifact(deobfJar.get(), closureOf<CurseArtifact> {
            displayName = "AdvancedRocketry ${ project.version }-deobf build $buildNumber for $mcVersion"
        })
    })
}

tasks.curseforge {
    dependsOn(makeChangelog)
}

publishing {
    repositories {
        maven {
            url = if (project.findProperty("local") == "true")
                uri("$buildDir/build/maven")
            else
                uri("file:///usr/share/nginx/maven/")
        }
    }
    publications {
        register("mavenJava", MavenPublication::class) {
            //from(components["java"])

            artifact(tasks.jar.get())
            artifact(deobfJar.get())
            artifact(makeChangelog.file)
        }
    }
}

tasks.curseforge {
  dependsOn("reobfJar")
}

tasks.publish {
    dependsOn(makeChangelog)
}

idea {
    module {
        inheritOutputDirs = true
    }
}